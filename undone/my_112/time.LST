C51 COMPILER V9.52.0.0   TIME                                                              01/05/2025 13:26:28 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE TIME
OBJECT MODULE PLACED IN time.OBJ
COMPILER INVOKED BY: D:\por-tool\Keil\C51\BIN\C51.EXE time.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "time.h"
   2          extern volatile u32 ISR_1Ms;
   3          void led_dis(u8 led_out)
   4          {
   5   1          P0 = ~led_out;
   6   1          P2 = (P2 & 0x1f) | 0x80;
   7   1          P2 = P2 & 0x1f;
   8   1      }
   9          void outer_cls(void)
  10          {
  11   1          P0 = 0xff;
  12   1          P2 = (P2 & 0x1f) | 0x80;
  13   1          P2 = P2 & 0x1f;
  14   1          P0 = 0x40;
  15   1          P2 = (P2 & 0x1f) | 0xA0;
  16   1          P2 = P2 & 0x1f;
  17   1      }
  18          void delay_1ms(u16 ts)
  19          {
  20   1          u32 Time_now;
  21   1          Time_now = ISR_1Ms;
  22   1          while ((ISR_1Ms - Time_now) < ts)
  23   1          {
  24   2              ;
  25   2          }
  26   1      }
  27          void Seg_trans(u8 *pseg_Disp, u8 *pseg_Code)
  28          {
  29   1          u8 i, j;
  30   1          for (i = 0, j = 0; j < 8; i++, j++)
  31   1          {
  32   2              switch (*(pseg_Disp + i))
  33   2              {
  34   3              case '0':
  35   3                  *(pseg_Code + j) = 0xc0;
  36   3                  break;
  37   3              case '1':
  38   3                  *(pseg_Code + j) = 0xf9;
  39   3                  break;
  40   3              case '2':
  41   3                  *(pseg_Code + j) = 0xa4;
  42   3                  break;
  43   3              case '3':
  44   3                  *(pseg_Code + j) = 0xb0;
  45   3                  break;
  46   3              case '4':
  47   3                  *(pseg_Code + j) = 0x99;
  48   3                  break;
  49   3              case '5':
  50   3                  *(pseg_Code + j) = 0x92;
  51   3                  break;
  52   3              case '6':
  53   3                  *(pseg_Code + j) = 0x82;
  54   3                  break;
  55   3              case '7':
C51 COMPILER V9.52.0.0   TIME                                                              01/05/2025 13:26:28 PAGE 2   

  56   3                  *(pseg_Code + j) = 0xf8;
  57   3                  break;
  58   3              case '8':
  59   3                  *(pseg_Code + j) = 0x80;
  60   3                  break;
  61   3              case '9':
  62   3                  *(pseg_Code + j) = 0x90;
  63   3                  break;
  64   3              case 'A':
  65   3                  *(pseg_Code + j) = 0x88;
  66   3                  break;
  67   3              case 'B':
  68   3                  *(pseg_Code + j) = 0x83;
  69   3                  break;
  70   3              case 'C':
  71   3                  *(pseg_Code + j) = 0xc6;
  72   3                  break;
  73   3              case 'D':
  74   3                  *(pseg_Code + j) = 0xa1;
  75   3                  break;
  76   3              case 'E':
  77   3                  *(pseg_Code + j) = 0x86;
  78   3                  break;
  79   3              case 'F':
  80   3                  *(pseg_Code + j) = 0x8e;
  81   3                  break;
  82   3              case 'U':
  83   3                  *(pseg_Code + j) = 0xc1;
  84   3                  break;
  85   3              case 'P':
  86   3                  *(pseg_Code + j) = 0x8c;
  87   3                  break;
  88   3              case 'N':
  89   3                  *(pseg_Code + j) = 0xab;
  90   3                  break;
  91   3              case '-':
  92   3                  *(pseg_Code + j) = 0xbf;
  93   3                  break;
  94   3              case ' ':
  95   3                  *(pseg_Code + j) = 0xff;
  96   3                  break;
  97   3              case '.':
  98   3                  j = j - 1;
  99   3                  *(pseg_Code + j) &= 0x7f;
 100   3                  break;
 101   3              default:
 102   3                  *(pseg_Code + j) = 0xff;
 103   3              }
 104   2          }
 105   1      }
 106          void Seg_Disp(u8 *pseg_Code, u8 seg_Add)
 107          {
 108   1          P0 = 0xff;
 109   1          P2 = (P2 & 0x1f) | 0xE0;
 110   1          P2 &= 0x1f;
 111   1          P0 = (u8)1 << seg_Add;
 112   1          P2 = (P2 & 0x1f) | 0xC0;
 113   1          P2 = P2 & 0x1F;
 114   1          P0 = *(pseg_Code + seg_Add);
 115   1          P2 = (P2 & 0x1F) | 0xE0;
 116   1          P2 = P2 & 0x1F;
 117   1      }
C51 COMPILER V9.52.0.0   TIME                                                              01/05/2025 13:26:28 PAGE 3   

 118          void T1_Init(void) // 12T 12M 1ms
 119          {
 120   1          TH1 = 0xFC;
 121   1          TL1 = 0x18;
 122   1          TMOD &= 0x0F;
 123   1          AUXR &= ~(1 << 6);
 124   1          TF1 = 0;
 125   1          ET1 = 1;
 126   1          EA = 1;
 127   1          TR1 = 1;
 128   1      }
 129          unsigned char key_MatrixRead(void)
 130          {
 131   1          u16 keyRD1, keyRD2;
 132   1          u8 button = 0;
 133   1          P44 = 0;
 134   1          P42 = 1;
 135   1          P35 = 1;
 136   1          P34 = 1;
 137   1          keyRD1 = P3 & 0x0f;
 138   1          P44 = 1;
 139   1          P42 = 0;
 140   1          keyRD1 = (keyRD1 << 4) | P3 & 0x0f;
 141   1          P42 = 1;
 142   1          P35 = 0;
 143   1          keyRD1 = (keyRD1 << 4) | P3 & 0x0f;
 144   1          P35 = 1;
 145   1          P34 = 0;
 146   1          keyRD1 = (keyRD1 << 4) | P3 & 0x0f;
 147   1          if (keyRD1 == 0xffff)
 148   1          {
 149   2              return 0;
 150   2          }
 151   1          delay_1ms(10);
 152   1          P44 = 0;
 153   1          P42 = 1;
 154   1          P35 = 1;
 155   1          P34 = 1;
 156   1          keyRD2 = P3 & 0x0f;
 157   1          P44 = 1;
 158   1          P42 = 0;
 159   1          keyRD2 = (keyRD2 << 4) | P3 & 0x0f;
 160   1          P42 = 1;
 161   1          P35 = 0;
 162   1          keyRD2 = (keyRD2 << 4) | P3 & 0x0f;
 163   1          P35 = 1;
 164   1          P34 = 0;
 165   1          keyRD2 = (keyRD2 << 4) | P3 & 0x0f;
 166   1          if (keyRD1 != keyRD2)
 167   1          {
 168   2              return 0;
 169   2          }
 170   1      
 171   1          switch (~keyRD2)
 172   1          {
 173   2          case 0x8000:
 174   2              button = 1;
 175   2              break;
 176   2          case 0x4000:
 177   2              button = 2;
 178   2              break;
 179   2          case 0x2000:
C51 COMPILER V9.52.0.0   TIME                                                              01/05/2025 13:26:28 PAGE 4   

 180   2              button = 3;
 181   2              break;
 182   2          case 0x1000:
 183   2              button = 4;
 184   2              break;
 185   2          case 0x0800:
 186   2              button = 5;
 187   2              break;
 188   2          case 0x0400:
 189   2              button = 6;
 190   2              break;
 191   2          case 0x0200:
 192   2              button = 7;
 193   2              break;
 194   2          case 0x0100:
 195   2              button = 8;
 196   2              break;
 197   2          case 0x0080: // S12
 198   2              button = 9;
 199   2              break;
 200   2          case 0x0040:
 201   2              button = 10;
 202   2              break;
 203   2          case 0x0020:
 204   2              button = 11;
 205   2              break;
 206   2          case 0x0010:
 207   2              button = 12;
 208   2              break;
 209   2          case 0x0008: // S16
 210   2              button = 13;
 211   2              break;
 212   2          case 0x0004: // S17
 213   2              button = 14;
 214   2              break;
 215   2          case 0x0002:
 216   2              button = 15;
 217   2              break;
 218   2          case 0x0001:
 219   2              button = 16;
 220   2              break;
 221   2          default:
 222   2              break;
 223   2          }
 224   1          return button;
 225   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1061    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
