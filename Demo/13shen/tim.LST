C51 COMPILER V9.52.0.0   TIM                                                               03/11/2025 18:30:12 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE TIM
OBJECT MODULE PLACED IN tim.OBJ
COMPILER INVOKED BY: D:\por-tool\Keil\C51\BIN\C51.EXE tim.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "tim.h"
   2          
   3          extern volatile u32 uwMs;
   4          void Led_Disp(u8 ucOut)
   5          {
   6   1        P0=~ucOut;
   7   1        P2=(P2 & 0x1F) | 0x80;
   8   1        P2=P2 & 0x1F;
   9   1      }
  10          
  11          void Cls_Waishe(void)
  12          {
  13   1        P0=0xFF;
  14   1        P2=(P2 & 0x1F) | 0x80;
  15   1        P2=P2 & 0x1F;
  16   1        P0=0x0;
  17   1        P2=(P2 & 0x1F) | 0xA0;
  18   1        P2=P2 & 0x1F;
  19   1      }
  20          void Relay(u8 ucVal)
  21          {
  22   1        P0=0x0;
  23   1        if(ucVal)
  24   1          P0 |=1<<4;  //
  25   1        else
  26   1          P0 &=~(1<<4);
  27   1        P2=(P2 & 0x1F) | 0xA0;
  28   1        P2=P2 & 0x1F;
  29   1      }
  30          void T1_Init(void)   //12T 12M
  31          {
  32   1        TH1=0xFC;
  33   1        TL1=0x18;
  34   1        TMOD &=0x0F;
  35   1        AUXR &=~(1<<6);
  36   1        TF1=0;
  37   1        ET1=1;
  38   1        EA=1;
  39   1        TR1=1;
  40   1      }
  41          void Delay(u16 usIn)
  42          {
  43   1        u32 uwInit;
  44   1        uwInit=uwMs;
  45   1        while(uwMs-uwInit<usIn);  
  46   1      }
  47          void Seg_Tran(u8 *pBuff,u8 *pCode)
  48          {
  49   1        u8 i,j;
  50   1        for(i=0,j=0;j<8;i++,j++)
  51   1        {
  52   2          switch(*(pBuff+i))
  53   2          {
  54   3            case '0':
  55   3              *(pCode+j)=0xc0;
C51 COMPILER V9.52.0.0   TIM                                                               03/11/2025 18:30:12 PAGE 2   

  56   3              break;
  57   3            case '1':
  58   3              *(pCode+j)=0xf9;
  59   3              break;
  60   3            case '2':
  61   3              *(pCode+j)=0xa4;
  62   3              break;
  63   3            case '3':
  64   3              *(pCode+j)=0xb0;
  65   3              break;
  66   3            case '4':
  67   3              *(pCode+j)=0x99;
  68   3              break;
  69   3            case '5':
  70   3              *(pCode+j)=0x92;
  71   3              break;
  72   3            case '6':
  73   3              *(pCode+j)=0x82;
  74   3              break;
  75   3            case '7':
  76   3              *(pCode+j)=0xf8;
  77   3              break;
  78   3            case '8':
  79   3              *(pCode+j)=0x80;
  80   3              break;
  81   3            case '9':
  82   3              *(pCode+j)=0x90;
  83   3              break;
  84   3            case 'A':
  85   3              *(pCode+j)=0x88;
  86   3              break;
  87   3            case 'B':
  88   3              *(pCode+j)=0x83;
  89   3              break;
  90   3            case 'C':
  91   3              *(pCode+j)=0xc6;
  92   3              break;
  93   3            case 'D':
  94   3              *(pCode+j)=0xa1;
  95   3              break;
  96   3            case 'E':
  97   3              *(pCode+j)=0x86;
  98   3              break;
  99   3            case 'F':
 100   3              *(pCode+j)=0x8e;
 101   3              break;
 102   3            case 'U':   //0011 1110->1100 0001
 103   3              *(pCode+j)=0xc1;
 104   3              break;
 105   3            case '-':
 106   3              *(pCode+j)=0xbf;
 107   3              break;
 108   3            case ' ':
 109   3              *(pCode+j)=0xff;
 110   3              break;
 111   3            case '.':
 112   3              j=j-1;
 113   3              *(pCode+j) &=0x7f;
 114   3              break;
 115   3            default:
 116   3              *(pCode+j)=0xff;        
 117   3          } 
C51 COMPILER V9.52.0.0   TIM                                                               03/11/2025 18:30:12 PAGE 3   

 118   2        }
 119   1      }
 120          void Seg_Disp(u8 *pCode,u8 ucPos)
 121          {
 122   1        P0=0xFF;
 123   1        P2=(P2 & 0x1F)|0xe0;
 124   1        P2 =P2 & 0x1F;
 125   1        P0=(u8)1<<ucPos;
 126   1        P2=(P2 & 0x1F)|0xc0;
 127   1        P2 =P2 & 0x1F;
 128   1        P0=*(pCode+ucPos);
 129   1        P2=(P2 & 0x1F)|0xe0;
 130   1        P2 =P2 & 0x1F;
 131   1      }
 132          u8 KBD_Read(void)
 133          {
 134   1        u16 uiArray1,uiArray2;
 135   1        u8 ucRtn=0;
 136   1        //P44=0;P42=1;P35=1;P34=1;     P34 used as Pwm out,in Capture
 137   1        P35=0;_nop_();P34=1;
 138   1        uiArray1=P3 & 0x0F;
 139   1        P35=1;P34=0;_nop_();
 140   1        uiArray1=(uiArray1 <<4) | P3 & 0x0F;    
 141   1        if(uiArray1==0x00FF) return 0;
 142   1        Delay(10);
 143   1        //P44=0;P42=1;P35=1;P34=1;
 144   1        P35=0;_nop_();P34=1;
 145   1        uiArray2=P3 & 0x0F;
 146   1        P35=1;P34=0;_nop_();
 147   1        uiArray2=(uiArray2 <<4) | P3 & 0x0F;
 148   1        
 149   1        if(uiArray1!=uiArray2) return 0;
 150   1        switch(~uiArray1)
 151   1        {
 152   2          case 0xFF80:    //S12
 153   2            ucRtn=1;
 154   2            break;
 155   2          case 0xFF40:    //S13
 156   2            ucRtn=2;
 157   2            break;    
 158   2          case 0xFF20:
 159   2            ucRtn=3;
 160   2            break;    
 161   2          case 0xFF10:
 162   2            ucRtn=4;
 163   2            break;    
 164   2          case 0xFF08:    //S16
 165   2            ucRtn=5;
 166   2            break;
 167   2          case 0xFF04:    //S17
 168   2            ucRtn=6;
 169   2            break;    
 170   2          case 0xFF02:
 171   2            ucRtn=7;
 172   2            break;    
 173   2          case 0xFF01:
 174   2            ucRtn=8;
 175   2            break;    
 176   2          default:
 177   2            ucRtn=0;
 178   2        }
 179   1        return ucRtn;
C51 COMPILER V9.52.0.0   TIM                                                               03/11/2025 18:30:12 PAGE 4   

 180   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    865    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
